{"ast":null,"code":"import _defineProperty from\"/home/webmaster/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/webmaster/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/home/webmaster/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"/home/webmaster/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _handleActions;var _marked=/*#__PURE__*/_regeneratorRuntime.mark(streamSaga);import{createAction,handleActions}from\"redux-actions\";import{takeLatest}from\"redux-saga/effects\";import createRequestSaga,{createRequestActionTypes}from\"../../lib/createRequestSaga\";import*as streamAPI from\"../../lib/api/stream\";//================================================\nvar _createRequestActionT=createRequestActionTypes(\"stream/GET_STREAM_INFO\"),_createRequestActionT2=_slicedToArray(_createRequestActionT,3),GET_STREAM_INFO=_createRequestActionT2[0],GET_STREAM_INFO_SUCCESS=_createRequestActionT2[1],GET_STREAM_INFO_FAILURE=_createRequestActionT2[2];var _createRequestActionT3=createRequestActionTypes(\"stream/GET_GPS_INFO\"),_createRequestActionT4=_slicedToArray(_createRequestActionT3,3),GET_GPS_INFO=_createRequestActionT4[0],GET_GPS_INFO_SUCCESS=_createRequestActionT4[1],GET_GPS_INFO_FAILURE=_createRequestActionT4[2];var CHANGE_GPS_TARGET=\"stream/CHANGE_GPS_TARGET\";//================================================\n// action\nexport var getStreamInfo=createAction(GET_STREAM_INFO);export var getGpsInfo=createAction(GET_GPS_INFO,function(target){return{target:target};});export var changeGpsTarget=createAction(CHANGE_GPS_TARGET,function(key){return key;});//================================================»\n// saga 생성\nvar getStreamInfoSaga=createRequestSaga(GET_STREAM_INFO,streamAPI.streamInfo);var getGpsInfoSaga=createRequestSaga(GET_GPS_INFO,streamAPI.getGpsInfo);export function streamSaga(){return _regeneratorRuntime.wrap(function streamSaga$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeLatest(GET_STREAM_INFO,getStreamInfoSaga);case 2:_context.next=4;return takeLatest(GET_GPS_INFO,getGpsInfoSaga);case 4:case\"end\":return _context.stop();}}},_marked);}//================================================\n// 초기화\nexport var initialState={stream:null,error:{type:null,description:null},target:null,gpsInfo:\"\"};//================================================\nvar stream=handleActions((_handleActions={},_defineProperty(_handleActions,GET_STREAM_INFO_SUCCESS,function(state,_ref){var data=_ref.payload;return _objectSpread({},state,{stream:data,error:initialState.error});}),_defineProperty(_handleActions,GET_STREAM_INFO_FAILURE,function(state,_ref2){var error=_ref2.payload;return _objectSpread({},state,{stream:null,error:{type:\"streamInfo\",description:error}});}),_defineProperty(_handleActions,CHANGE_GPS_TARGET,function(state,_ref3){var key=_ref3.payload;return _objectSpread({},state,{target:key});}),_defineProperty(_handleActions,GET_GPS_INFO_SUCCESS,function(state,_ref4){var data=_ref4.payload;return _objectSpread({},state,{gpsInfo:data,error:initialState.error});}),_defineProperty(_handleActions,GET_GPS_INFO_FAILURE,function(state,_ref5){var error=_ref5.payload;return _objectSpread({},state,{gpsInfo:null,error:{type:\"gpsInfo\",description:error}});}),_handleActions),initialState);export default stream;","map":{"version":3,"sources":["/home/webmaster/front/src/store/modules/stream.js"],"names":["streamSaga","createAction","handleActions","takeLatest","createRequestSaga","createRequestActionTypes","streamAPI","GET_STREAM_INFO","GET_STREAM_INFO_SUCCESS","GET_STREAM_INFO_FAILURE","GET_GPS_INFO","GET_GPS_INFO_SUCCESS","GET_GPS_INFO_FAILURE","CHANGE_GPS_TARGET","getStreamInfo","getGpsInfo","target","changeGpsTarget","key","getStreamInfoSaga","streamInfo","getGpsInfoSaga","initialState","stream","error","type","description","gpsInfo","state","data","payload"],"mappings":"6mBA2CiBA,U,EA3CjB,OAASC,YAAT,CAAuBC,aAAvB,KAA4C,eAA5C,CACA,OAASC,UAAT,KAA2B,oBAA3B,CACA,MAAOC,CAAAA,iBAAP,EACEC,wBADF,KAEO,6BAFP,CAGA,MAAO,GAAKC,CAAAA,SAAZ,KAA2B,sBAA3B,CAEA;0BAMID,wBAAwB,CAAC,wBAAD,C,gEAH1BE,e,2BACAC,uB,2BACAC,uB,sDAOEJ,wBAAwB,CAAC,qBAAD,C,iEAH1BK,Y,2BACAC,oB,2BACAC,oB,2BAGF,GAAMC,CAAAA,iBAAiB,CAAG,0BAA1B,CAEA;AAEA;AAEA,MAAO,IAAMC,CAAAA,aAAa,CAAGb,YAAY,CAACM,eAAD,CAAlC,CACP,MAAO,IAAMQ,CAAAA,UAAU,CAAGd,YAAY,CAACS,YAAD,CAAe,SAAAM,MAAM,QAAK,CAAEA,MAAM,CAANA,MAAF,CAAL,EAArB,CAA/B,CAEP,MAAO,IAAMC,CAAAA,eAAe,CAAGhB,YAAY,CAACY,iBAAD,CAAoB,SAAAK,GAAG,QAAIA,CAAAA,GAAJ,EAAvB,CAApC,CAEP;AAEA;AAEA,GAAMC,CAAAA,iBAAiB,CAAGf,iBAAiB,CACzCG,eADyC,CAEzCD,SAAS,CAACc,UAF+B,CAA3C,CAKA,GAAMC,CAAAA,cAAc,CAAGjB,iBAAiB,CAACM,YAAD,CAAeJ,SAAS,CAACS,UAAzB,CAAxC,CAEA,MAAO,SAAUf,CAAAA,UAAV,sIACL,MAAMG,CAAAA,UAAU,CAACI,eAAD,CAAkBY,iBAAlB,CAAhB,CADK,uBAEL,MAAMhB,CAAAA,UAAU,CAACO,YAAD,CAAeW,cAAf,CAAhB,CAFK,sDAKP;AAEA;AACA,MAAO,IAAMC,CAAAA,YAAY,CAAG,CAC1BC,MAAM,CAAE,IADkB,CAE1BC,KAAK,CAAE,CACLC,IAAI,CAAE,IADD,CAELC,WAAW,CAAE,IAFR,CAFmB,CAM1BV,MAAM,CAAE,IANkB,CAO1BW,OAAO,CAAE,EAPiB,CAArB,CAUP;AAEA,GAAMJ,CAAAA,MAAM,CAAGrB,aAAa,mDAEvBM,uBAFuB,CAEG,SAACoB,KAAD,UAAmBC,CAAAA,IAAnB,MAAUC,OAAV,yBACtBF,KADsB,EAEzBL,MAAM,CAAEM,IAFiB,CAGzBL,KAAK,CAAEF,YAAY,CAACE,KAHK,IAFH,iCAOvBf,uBAPuB,CAOG,SAACmB,KAAD,WAAmBJ,CAAAA,KAAnB,OAAUM,OAAV,yBACtBF,KADsB,EAEzBL,MAAM,CAAE,IAFiB,CAGzBC,KAAK,CAAE,CAAEC,IAAI,CAAE,YAAR,CAAsBC,WAAW,CAAEF,KAAnC,CAHkB,IAPH,iCAYvBX,iBAZuB,CAYH,SAACe,KAAD,WAAmBV,CAAAA,GAAnB,OAAUY,OAAV,yBAChBF,KADgB,EAEnBZ,MAAM,CAAEE,GAFW,IAZG,iCAgBvBP,oBAhBuB,CAgBA,SAACiB,KAAD,WAAmBC,CAAAA,IAAnB,OAAUC,OAAV,yBACnBF,KADmB,EAEtBD,OAAO,CAAEE,IAFa,CAGtBL,KAAK,CAAEF,YAAY,CAACE,KAHE,IAhBA,iCAqBvBZ,oBArBuB,CAqBA,SAACgB,KAAD,WAAmBJ,CAAAA,KAAnB,OAAUM,OAAV,yBACnBF,KADmB,EAEtBD,OAAO,CAAE,IAFa,CAGtBH,KAAK,CAAE,CAAEC,IAAI,CAAE,SAAR,CAAmBC,WAAW,CAAEF,KAAhC,CAHe,IArBA,kBA2B1BF,YA3B0B,CAA5B,CA8BA,cAAeC,CAAAA,MAAf","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { takeLatest } from \"redux-saga/effects\";\nimport createRequestSaga, {\n  createRequestActionTypes\n} from \"../../lib/createRequestSaga\";\nimport * as streamAPI from \"../../lib/api/stream\";\n\n//================================================\n\nconst [\n  GET_STREAM_INFO,\n  GET_STREAM_INFO_SUCCESS,\n  GET_STREAM_INFO_FAILURE\n] = createRequestActionTypes(\"stream/GET_STREAM_INFO\");\n\nconst [\n  GET_GPS_INFO,\n  GET_GPS_INFO_SUCCESS,\n  GET_GPS_INFO_FAILURE\n] = createRequestActionTypes(\"stream/GET_GPS_INFO\");\n\nconst CHANGE_GPS_TARGET = \"stream/CHANGE_GPS_TARGET\";\n\n//================================================\n\n// action\n\nexport const getStreamInfo = createAction(GET_STREAM_INFO);\nexport const getGpsInfo = createAction(GET_GPS_INFO, target => ({ target }));\n\nexport const changeGpsTarget = createAction(CHANGE_GPS_TARGET, key => key);\n\n//================================================»\n\n// saga 생성\n\nconst getStreamInfoSaga = createRequestSaga(\n  GET_STREAM_INFO,\n  streamAPI.streamInfo\n);\n\nconst getGpsInfoSaga = createRequestSaga(GET_GPS_INFO, streamAPI.getGpsInfo);\n\nexport function* streamSaga() {\n  yield takeLatest(GET_STREAM_INFO, getStreamInfoSaga);\n  yield takeLatest(GET_GPS_INFO, getGpsInfoSaga);\n}\n\n//================================================\n\n// 초기화\nexport const initialState = {\n  stream: null,\n  error: {\n    type: null,\n    description: null\n  },\n  target: null,\n  gpsInfo: \"\"\n};\n\n//================================================\n\nconst stream = handleActions(\n  {\n    [GET_STREAM_INFO_SUCCESS]: (state, { payload: data }) => ({\n      ...state,\n      stream: data,\n      error: initialState.error\n    }),\n    [GET_STREAM_INFO_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      stream: null,\n      error: { type: \"streamInfo\", description: error }\n    }),\n    [CHANGE_GPS_TARGET]: (state, { payload: key }) => ({\n      ...state,\n      target: key\n    }),\n    [GET_GPS_INFO_SUCCESS]: (state, { payload: data }) => ({\n      ...state,\n      gpsInfo: data,\n      error: initialState.error\n    }),\n    [GET_GPS_INFO_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      gpsInfo: null,\n      error: { type: \"gpsInfo\", description: error }\n    })\n  },\n  initialState\n);\n\nexport default stream;\n"]},"metadata":{},"sourceType":"module"}