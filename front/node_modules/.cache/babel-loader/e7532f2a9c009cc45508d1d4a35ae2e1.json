{"ast":null,"code":"import _objectSpread from\"/home/webmaster/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from'react';import{Rect,Transformer}from'react-konva';var Rectangle=function Rectangle(_ref){var shapeProps=_ref.shapeProps,isSelected=_ref.isSelected,onSelect=_ref.onSelect,onChange=_ref.onChange;var shapeRef=React.useRef();var trRef=React.useRef();React.useEffect(function(){if(isSelected){// we need to attach transformer manually\ntrRef.current.nodes([shapeRef.current]);trRef.current.getLayer().batchDraw();}},[isSelected]);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Rect,Object.assign({onClick:onSelect,onTap:onSelect,ref:shapeRef},shapeProps,{stroke:shapeProps.type===0?\"red\":\"blue\",draggable:true,onDragEnd:function onDragEnd(e){onChange(_objectSpread({},shapeProps,{x:e.target.x(),y:e.target.y()}));},onTransformEnd:function onTransformEnd(e){// transformer is changing scale of the node\n// and NOT its width or height\n// but in the store we have only width and height\n// to match the data better we will reset scale on transform end\nvar node=shapeRef.current;var scaleX=node.scaleX();var scaleY=node.scaleY();// we will reset it back\nnode.scaleX(1);node.scaleY(1);onChange(_objectSpread({},shapeProps,{x:node.x(),y:node.y(),// set minimal value\nwidth:Math.max(5,node.width()*scaleX)>50?50:Math.max(5,node.width()*scaleX),height:Math.max(node.height()*scaleY)>50?50:Math.max(node.height()*scaleY)}));}})),isSelected&&/*#__PURE__*/React.createElement(Transformer,{ref:trRef,boundBoxFunc:function boundBoxFunc(oldBox,newBox){// limit resize\nif(newBox.width<5||newBox.height<5){return oldBox;}return newBox;}}));};export default Rectangle;","map":{"version":3,"sources":["/home/webmaster/front/src/components/Detect/Rectangle.js"],"names":["React","Rect","Transformer","Rectangle","shapeProps","isSelected","onSelect","onChange","shapeRef","useRef","trRef","useEffect","current","nodes","getLayer","batchDraw","type","e","x","target","y","node","scaleX","scaleY","width","Math","max","height","oldBox","newBox"],"mappings":"2IAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,CAAeC,WAAf,KAAkC,aAAlC,CAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAAoD,IAAjDC,CAAAA,UAAiD,MAAjDA,UAAiD,CAArCC,UAAqC,MAArCA,UAAqC,CAAzBC,QAAyB,MAAzBA,QAAyB,CAAfC,QAAe,MAAfA,QAAe,CACpE,GAAMC,CAAAA,QAAQ,CAAGR,KAAK,CAACS,MAAN,EAAjB,CACA,GAAMC,CAAAA,KAAK,CAAGV,KAAK,CAACS,MAAN,EAAd,CAEAT,KAAK,CAACW,SAAN,CAAgB,UAAM,CACpB,GAAIN,UAAJ,CAAgB,CACd;AACAK,KAAK,CAACE,OAAN,CAAcC,KAAd,CAAoB,CAACL,QAAQ,CAACI,OAAV,CAApB,EACAF,KAAK,CAACE,OAAN,CAAcE,QAAd,GAAyBC,SAAzB,GACD,CACF,CAND,CAMG,CAACV,UAAD,CANH,EAQA,mBACE,oBAAC,KAAD,CAAO,QAAP,mBACE,oBAAC,IAAD,gBACE,OAAO,CAAEC,QADX,CAEE,KAAK,CAAEA,QAFT,CAGE,GAAG,CAAEE,QAHP,EAIMJ,UAJN,EAKE,MAAM,CAAEA,UAAU,CAACY,IAAX,GAAoB,CAApB,CAAwB,KAAxB,CAAgC,MAL1C,CAME,SAAS,KANX,CAOE,SAAS,CAAE,mBAACC,CAAD,CAAO,CAChBV,QAAQ,kBACHH,UADG,EAENc,CAAC,CAAED,CAAC,CAACE,MAAF,CAASD,CAAT,EAFG,CAGNE,CAAC,CAAEH,CAAC,CAACE,MAAF,CAASC,CAAT,EAHG,GAAR,CAKD,CAbH,CAcE,cAAc,CAAE,wBAACH,CAAD,CAAO,CACrB;AACA;AACA;AACA;AACA,GAAMI,CAAAA,IAAI,CAAGb,QAAQ,CAACI,OAAtB,CACA,GAAMU,CAAAA,MAAM,CAAGD,IAAI,CAACC,MAAL,EAAf,CACA,GAAMC,CAAAA,MAAM,CAAGF,IAAI,CAACE,MAAL,EAAf,CAEA;AACAF,IAAI,CAACC,MAAL,CAAY,CAAZ,EACAD,IAAI,CAACE,MAAL,CAAY,CAAZ,EACAhB,QAAQ,kBACHH,UADG,EAENc,CAAC,CAAEG,IAAI,CAACH,CAAL,EAFG,CAGNE,CAAC,CAAEC,IAAI,CAACD,CAAL,EAHG,CAIN;AACAI,KAAK,CAAEC,IAAI,CAACC,GAAL,CAAS,CAAT,CAAYL,IAAI,CAACG,KAAL,GAAeF,MAA3B,EAAqC,EAArC,CAA0C,EAA1C,CAA+CG,IAAI,CAACC,GAAL,CAAS,CAAT,CAAYL,IAAI,CAACG,KAAL,GAAeF,MAA3B,CALhD,CAMNK,MAAM,CAAEF,IAAI,CAACC,GAAL,CAASL,IAAI,CAACM,MAAL,GAAgBJ,MAAzB,EAAmC,EAAnC,CAAwC,EAAxC,CAA6CE,IAAI,CAACC,GAAL,CAASL,IAAI,CAACM,MAAL,GAAgBJ,MAAzB,CAN/C,GAAR,CAQD,CAlCH,GADF,CAqCGlB,UAAU,eACT,oBAAC,WAAD,EACE,GAAG,CAAEK,KADP,CAEE,YAAY,CAAE,sBAACkB,MAAD,CAASC,MAAT,CAAoB,CAChC;AACA,GAAIA,MAAM,CAACL,KAAP,CAAe,CAAf,EAAoBK,MAAM,CAACF,MAAP,CAAgB,CAAxC,CAA2C,CACzC,MAAOC,CAAAA,MAAP,CACD,CACD,MAAOC,CAAAA,MAAP,CACD,CARH,EAtCJ,CADF,CAoDD,CAhED,CAkEA,cAAe1B,CAAAA,SAAf","sourcesContent":["import React from 'react';\nimport { Rect, Transformer } from 'react-konva';\n\nconst Rectangle = ({ shapeProps, isSelected, onSelect, onChange }) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n\n  return (\n    <React.Fragment>\n      <Rect\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        stroke={shapeProps.type === 0 ? \"red\" : \"blue\"}\n        draggable\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n        }}\n        onTransformEnd={(e) => {\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            width: Math.max(5, node.width() * scaleX) > 50 ? 50 : Math.max(5, node.width() * scaleX),\n            height: Math.max(node.height() * scaleY) > 50 ? 50 : Math.max(node.height() * scaleY),\n          });\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default Rectangle;"]},"metadata":{},"sourceType":"module"}