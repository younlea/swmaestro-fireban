{"ast":null,"code":"import _regeneratorRuntime from\"/home/webmaster/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/webmaster/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import React,{useEffect}from\"react\";import{useSelector,useDispatch}from\"react-redux\";import DetectInfo from\"../../components/Detect/DetectInfo\";import{getDetectInfo,getDetectInfoMore}from\"../../store/modules/detect\";// import RecordInfo from \"../../components/Record/RecordInfo\";\nvar _window=window,kakao=_window.kakao;var SubNavContents=[{title:\"탐지결과\",description:\"요구조자 및 화재 탐지 이미지를 확인하실 수 있습니다.\",color:\"blue\"},{title:\"탐지수정\",description:\"탐지된 데이터를 수정하여 탐지율을 향상시킬 수 있습니다.\",color:\"blue\"}];function InfoContainer(_ref){var onDetect=_ref.onDetect,type=_ref.type;var imageList=useSelector(function(state){return state.detect.imageList;});var dispatch=useDispatch();var error=useSelector(function(state){return state.detect.error;});var loading=useSelector(function(state){return state.loading[\"detect/GET_DETECT_INFO\"];});var page=useSelector(function(state){return state.detect.page;});useEffect(function(){if(error.type!==\"\"&&!imageList){dispatch(getDetectInfo(1));}},[dispatch,error.type,imageList]);var onRefresh=function onRefresh(e){e.preventDefault();dispatch(getDetectInfo(1));};var getDetectMore=function getDetectMore(e){dispatch(getDetectInfoMore(Number(page)+1));};var geocoder=new kakao.maps.services.Geocoder();function searchAddrFromCoords(_x){return _searchAddrFromCoords.apply(this,arguments);}function _searchAddrFromCoords(){_searchAddrFromCoords=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(coords){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(!coords||!coords.cordinateX||!coords.cordinateY)){_context.next=2;break;}return _context.abrupt(\"return\",\"X1\");case 2:_context.next=4;return geocoder.coord2RegionCode(coords.cordinateX,coords.cordinateY);case 4:result=_context.sent;if(!result){_context.next=9;break;}return _context.abrupt(\"return\",2);case 9:return _context.abrupt(\"return\",1);case 10:case\"end\":return _context.stop();}}},_callee);}));return _searchAddrFromCoords.apply(this,arguments);}return/*#__PURE__*/React.createElement(DetectInfo,{info:imageList,loading:loading,onRefresh:onRefresh,onDetect:onDetect,searchAddrFromCoords:searchAddrFromCoords,type:type,SubNavContents:type===\"edit\"?SubNavContents[1]:SubNavContents[0],getDetectMore:getDetectMore});}export default InfoContainer;","map":{"version":3,"sources":["/home/webmaster/front/src/containers/Detect/InfoContainer.js"],"names":["React","useEffect","useSelector","useDispatch","DetectInfo","getDetectInfo","getDetectInfoMore","window","kakao","SubNavContents","title","description","color","InfoContainer","onDetect","type","imageList","state","detect","dispatch","error","loading","page","onRefresh","e","preventDefault","getDetectMore","Number","geocoder","maps","services","Geocoder","searchAddrFromCoords","coords","cordinateX","cordinateY","coord2RegionCode","result"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport DetectInfo from \"../../components/Detect/DetectInfo\";\nimport { getDetectInfo, getDetectInfoMore } from \"../../store/modules/detect\";\n// import RecordInfo from \"../../components/Record/RecordInfo\";\nconst { kakao } = window;\n\nconst SubNavContents = [\n  {\n    title: \"탐지결과\",\n    description: \"요구조자 및 화재 탐지 이미지를 확인하실 수 있습니다.\",\n    color: \"blue\"\n  },\n  {\n    title: \"탐지수정\",\n    description: \"탐지된 데이터를 수정하여 탐지율을 향상시킬 수 있습니다.\",\n    color: \"blue\"\n  }\n];\n\nfunction InfoContainer({ onDetect, type }) {\n  const imageList = useSelector(state => state.detect.imageList);\n  const dispatch = useDispatch();\n  const error = useSelector(state => state.detect.error);\n  const loading = useSelector(state => state.loading[\"detect/GET_DETECT_INFO\"]);\n  const page = useSelector(state => state.detect.page)\n\n  useEffect(() => {\n    if (error.type !== \"\" && !imageList) {\n      dispatch(getDetectInfo(1));\n    }\n  }, [dispatch, error.type, imageList]);\n\n  const onRefresh = e => {\n    e.preventDefault();\n    dispatch(getDetectInfo(1));\n  };\n\n  const getDetectMore = e => {\n    dispatch(getDetectInfoMore(Number(page)+1));\n  }\n\n  let geocoder = new kakao.maps.services.Geocoder();\n\n  async function searchAddrFromCoords(coords) {\n    if (!coords || !coords.cordinateX || !coords.cordinateY) {\n      return \"X1\";\n    }\n    const result = await geocoder.coord2RegionCode(\n      coords.cordinateX,\n      coords.cordinateY\n    );\n    if (result) {\n      return 2;\n    } else {\n      return 1;\n    }\n  }\n\n  return (\n    <DetectInfo\n      info={imageList}\n      loading={loading}\n      onRefresh={onRefresh}\n      onDetect={onDetect}\n      searchAddrFromCoords={searchAddrFromCoords}\n      type={type}\n      SubNavContents={type===\"edit\" ? SubNavContents[1] : SubNavContents[0]}\n      getDetectMore={getDetectMore}\n    ></DetectInfo>\n  );\n}\n\nexport default InfoContainer;\n"]},"metadata":{},"sourceType":"module"}