{"ast":null,"code":"import _regeneratorRuntime from\"/home/webmaster/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/webmaster/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import React,{useEffect}from\"react\";import{useSelector,useDispatch}from\"react-redux\";import{getStreamInfo}from\"../../store/modules/stream\";import StreamInfo from\"../../components/Stream/StreamInfo\";var _window=window,kakao=_window.kakao;function InfoContainer(_ref){var onStream=_ref.onStream;var streamInfo=useSelector(function(state){return state.stream.stream;});var dispatch=useDispatch();var error=useSelector(function(state){return state.stream.error;});var loading=useSelector(function(state){return state.loading[\"stream/GET_STREAM_INFO\"];});useEffect(function(){if(error.type!==\"streamInfo\"&&!streamInfo){dispatch(getStreamInfo());}},[dispatch,error.type,streamInfo]);var onRefresh=function onRefresh(e){e.preventDefault();dispatch(getStreamInfo());};var geocoder=new kakao.maps.services.Geocoder();function searchAddrFromCoords(_x){return _searchAddrFromCoords.apply(this,arguments);}function _searchAddrFromCoords(){_searchAddrFromCoords=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(coords){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(!coords||!coords.cordinateX||!coords.cordinateY)){_context.next=2;break;}return _context.abrupt(\"return\",\"X1\");case 2:_context.next=4;return geocoder.coord2RegionCode(coords.cordinateX,coords.cordinateY);case 4:result=_context.sent;if(!result){_context.next=9;break;}return _context.abrupt(\"return\",2);case 9:return _context.abrupt(\"return\",1);case 10:case\"end\":return _context.stop();}}},_callee);}));return _searchAddrFromCoords.apply(this,arguments);}return/*#__PURE__*/React.createElement(StreamInfo,{info:streamInfo,loading:loading,onRefresh:onRefresh,onStream:onStream,searchAddrFromCoords:searchAddrFromCoords},\"InfoContainer\");}export default InfoContainer;","map":{"version":3,"sources":["/home/webmaster/front/src/containers/Stream/InfoContainer.js"],"names":["React","useEffect","useSelector","useDispatch","getStreamInfo","StreamInfo","window","kakao","InfoContainer","onStream","streamInfo","state","stream","dispatch","error","loading","type","onRefresh","e","preventDefault","geocoder","maps","services","Geocoder","searchAddrFromCoords","coords","cordinateX","cordinateY","coord2RegionCode","result"],"mappings":"qRAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,aAAT,KAA8B,4BAA9B,CACA,MAAOC,CAAAA,UAAP,KAAuB,oCAAvB,C,YACkBC,M,CAAVC,K,SAAAA,K,CAER,QAASC,CAAAA,aAAT,MAAqC,IAAZC,CAAAA,QAAY,MAAZA,QAAY,CACnC,GAAMC,CAAAA,UAAU,CAAGR,WAAW,CAAC,SAAAS,KAAK,QAAIA,CAAAA,KAAK,CAACC,MAAN,CAAaA,MAAjB,EAAN,CAA9B,CACA,GAAMC,CAAAA,QAAQ,CAAGV,WAAW,EAA5B,CACA,GAAMW,CAAAA,KAAK,CAAGZ,WAAW,CAAC,SAAAS,KAAK,QAAIA,CAAAA,KAAK,CAACC,MAAN,CAAaE,KAAjB,EAAN,CAAzB,CACA,GAAMC,CAAAA,OAAO,CAAGb,WAAW,CAAC,SAAAS,KAAK,QAAIA,CAAAA,KAAK,CAACI,OAAN,CAAc,wBAAd,CAAJ,EAAN,CAA3B,CACAd,SAAS,CAAC,UAAM,CACd,GAAIa,KAAK,CAACE,IAAN,GAAe,YAAf,EAA+B,CAACN,UAApC,CAAgD,CAC9CG,QAAQ,CAACT,aAAa,EAAd,CAAR,CACD,CACF,CAJQ,CAIN,CAACS,QAAD,CAAWC,KAAK,CAACE,IAAjB,CAAuBN,UAAvB,CAJM,CAAT,CAMA,GAAMO,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAAC,CAAC,CAAI,CACrBA,CAAC,CAACC,cAAF,GACAN,QAAQ,CAACT,aAAa,EAAd,CAAR,CACD,CAHD,CAIA,GAAIgB,CAAAA,QAAQ,CAAG,GAAIb,CAAAA,KAAK,CAACc,IAAN,CAAWC,QAAX,CAAoBC,QAAxB,EAAf,CAfmC,QAiBpBC,CAAAA,oBAjBoB,wKAiBnC,iBAAoCC,MAApC,kIACM,CAACA,MAAD,EAAW,CAACA,MAAM,CAACC,UAAnB,EAAiC,CAACD,MAAM,CAACE,UAD/C,0DAEW,IAFX,+BAIuBP,CAAAA,QAAQ,CAACQ,gBAAT,CACnBH,MAAM,CAACC,UADY,CAEnBD,MAAM,CAACE,UAFY,CAJvB,QAIQE,MAJR,mBAQMA,MARN,yDASW,CATX,yCAWW,CAXX,yDAjBmC,uDAgCnC,mBACE,oBAAC,UAAD,EACE,IAAI,CAAEnB,UADR,CAEE,OAAO,CAAEK,OAFX,CAGE,SAAS,CAAEE,SAHb,CAIE,QAAQ,CAAER,QAJZ,CAKE,oBAAoB,CAAEe,oBALxB,kBADF,CAWD,CAED,cAAehB,CAAAA,aAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getStreamInfo } from \"../../store/modules/stream\";\nimport StreamInfo from \"../../components/Stream/StreamInfo\";\nconst { kakao } = window;\n\nfunction InfoContainer({ onStream }) {\n  const streamInfo = useSelector(state => state.stream.stream);\n  const dispatch = useDispatch();\n  const error = useSelector(state => state.stream.error);\n  const loading = useSelector(state => state.loading[\"stream/GET_STREAM_INFO\"]);\n  useEffect(() => {\n    if (error.type !== \"streamInfo\" && !streamInfo) {\n      dispatch(getStreamInfo());\n    }\n  }, [dispatch, error.type, streamInfo]);\n\n  const onRefresh = e => {\n    e.preventDefault();\n    dispatch(getStreamInfo());\n  };\n  let geocoder = new kakao.maps.services.Geocoder();\n\n  async function searchAddrFromCoords(coords) {\n    if (!coords || !coords.cordinateX || !coords.cordinateY) {\n      return \"X1\";\n    }\n    const result = await geocoder.coord2RegionCode(\n      coords.cordinateX,\n      coords.cordinateY\n    );\n    if (result) {\n      return 2;\n    } else {\n      return 1;\n    }\n  }\n\n  return (\n    <StreamInfo\n      info={streamInfo}\n      loading={loading}\n      onRefresh={onRefresh}\n      onStream={onStream}\n      searchAddrFromCoords={searchAddrFromCoords}\n    >\n      InfoContainer\n    </StreamInfo>\n  );\n}\n\nexport default InfoContainer;\n"]},"metadata":{},"sourceType":"module"}