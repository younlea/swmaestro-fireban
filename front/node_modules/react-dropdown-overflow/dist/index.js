

function ___$insertStyle(css) {
  if (!css) {
    return;
  }
  if (typeof window === 'undefined') {
    return;
  }

  var style = document.createElement('style');

  style.setAttribute('type', 'text/css');
  style.innerHTML = css;
  document.head.appendChild(style);
  return css;
}

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

___$insertStyle(".dropdown-wrapper {\n  position: fixed;\n  display: flex;\n}");

var clamp = function (_a) {
    var _b = _a.left, left = _b === void 0 ? 0 : _b, _c = _a.top, top = _c === void 0 ? 0 : _c, _d = _a.width, width = _d === void 0 ? 0 : _d;
    var leftCopy = left;
    if (leftCopy < 0) {
        leftCopy = 0;
    }
    else if (left + width > document.documentElement.clientWidth) {
        leftCopy = document.documentElement.clientWidth - width;
    }
    return { left: leftCopy, top: top };
};
function calculatePosition(refContainer, refDropdown, positioning) {
    var _a, _b, _c, _d, _e, _f;
    var dropdownPosition = ((_a = refContainer === null || refContainer === void 0 ? void 0 : refContainer.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || {
        left: 0,
        top: 0,
        width: 0,
        height: 0,
    };
    var left = dropdownPosition.left;
    var top = dropdownPosition.top, width = dropdownPosition.width, height = dropdownPosition.height;
    switch (positioning) {
        case "center":
            left += width / 2;
            left -= (((_c = (_b = refDropdown === null || refDropdown === void 0 ? void 0 : refDropdown.current) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect()) === null || _c === void 0 ? void 0 : _c.width) || 0) / 2;
            break;
        case "left":
            break;
        case "right":
            left += width;
            left -= ((_e = (_d = refDropdown === null || refDropdown === void 0 ? void 0 : refDropdown.current) === null || _d === void 0 ? void 0 : _d.getBoundingClientRect()) === null || _e === void 0 ? void 0 : _e.width) || 0;
            break;
        default:
            throw new Error("Unknown positioning " + positioning);
    }
    var clamped = clamp({
        left: left,
        top: top,
        width: ((_f = refDropdown === null || refDropdown === void 0 ? void 0 : refDropdown.current) === null || _f === void 0 ? void 0 : _f.getBoundingClientRect().width) || 0,
    });
    return { left: clamped.left, top: clamped.top + height };
}
function Dropdown(_a) {
    var children = _a.children, _b = _a.className, className = _b === void 0 ? "dropdown" : _b, dropdown = _a.dropdown, dropdownWrapperId = _a.dropdownWrapperId, _c = _a.hasClickOutsideListener, hasClickOutsideListener = _c === void 0 ? true : _c, _d = _a.isOpen, isOpen = _d === void 0 ? undefined : _d, _e = _a.mode, mode = _e === void 0 ? "hover" : _e, _f = _a.positioning, positioning = _f === void 0 ? "center" : _f, wrapperId = _a.wrapperId, _g = _a.zIndex, zIndex = _g === void 0 ? "auto" : _g, props = __rest(_a, ["children", "className", "dropdown", "dropdownWrapperId", "hasClickOutsideListener", "isOpen", "mode", "positioning", "wrapperId", "zIndex"]);
    var _h = React.useState({ left: 0, top: 0 }), position = _h[0], setPosition = _h[1];
    var _j = React.useState(false), shouldRenderContent = _j[0], setShouldRenderContent = _j[1];
    var _k = React.useState(false), isDropdownShown = _k[0], setIsDropdownShown = _k[1];
    var refContainer = React.useRef(null);
    var refDropdown = React.useRef(null);
    var IS_CONTROLLED = !(typeof isOpen === "undefined" || isOpen === null);
    var modeCopy = mode;
    if (mode !== "hover" && mode !== "click") {
        console.error("Use one of ['hover', 'click'] for mode prop. Defaulting to hover.");
        modeCopy = "hover";
    }
    var calculatePositionAndSetState = React.useCallback(function () {
        if (isDropdownShown) {
            var position_1 = calculatePosition(refContainer, refDropdown, positioning);
            setPosition(position_1);
        }
    }, [isDropdownShown, positioning]);
    React.useEffect(function () {
        window.addEventListener("scroll", calculatePositionAndSetState);
        window.addEventListener("resize", calculatePositionAndSetState);
        return function () {
            window.removeEventListener("scroll", calculatePositionAndSetState);
            window.removeEventListener("resize", calculatePositionAndSetState);
        };
    }, [calculatePositionAndSetState]);
    React.useEffect(function () {
        if (IS_CONTROLLED) {
            if (isOpen) {
                setShouldRenderContent(true);
            }
            else {
                setShouldRenderContent(false);
            }
        }
    }, [IS_CONTROLLED, isOpen]);
    React.useEffect(function () {
        if (shouldRenderContent) {
            var position_2 = calculatePosition(refContainer, refDropdown, positioning);
            setPosition(position_2);
            setIsDropdownShown(true);
        }
    }, [positioning, shouldRenderContent]);
    React.useEffect(function () {
        function outsideClickListener(event) {
            var _a;
            if (!((_a = refContainer === null || refContainer === void 0 ? void 0 : refContainer.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {
                setShouldRenderContent(false);
            }
        }
        if (hasClickOutsideListener && !IS_CONTROLLED) {
            window.addEventListener("click", outsideClickListener);
        }
        return function () { return window.removeEventListener("click", outsideClickListener); };
    }, [IS_CONTROLLED, hasClickOutsideListener, positioning]);
    function onKeyDown(event) {
        if (mode === "hover") {
            if ([" ", "Enter"].includes(event.key)) {
                setShouldRenderContent(function (curr) { return !curr; });
            }
        }
        if (IS_CONTROLLED) {
            return;
        }
    }
    function onMouseEnter() {
        if (IS_CONTROLLED) {
            return;
        }
        if (modeCopy === "hover") {
            setShouldRenderContent(true);
        }
    }
    function onMouseLeave() {
        if (IS_CONTROLLED) {
            return;
        }
        if (modeCopy === "hover") {
            setShouldRenderContent(false);
        }
        return;
    }
    function onClick(event) {
        var _a;
        if (IS_CONTROLLED) {
            return;
        }
        if (modeCopy === "click") {
            if (!((_a = refDropdown === null || refDropdown === void 0 ? void 0 : refDropdown.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {
                setShouldRenderContent(function (curr) { return !curr; });
            }
        }
        return;
    }
    return (React.createElement("div", __assign({ className: className, tabIndex: IS_CONTROLLED ? undefined : 0, role: IS_CONTROLLED ? undefined : "button", onKeyDown: onKeyDown, id: wrapperId, ref: refContainer, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, onClick: onClick }, props),
        children,
        React.createElement("div", { className: "dropdown-wrapper", id: dropdownWrapperId, ref: refDropdown, style: {
                visibility: isDropdownShown ? "visible" : "hidden",
                top: position.top,
                left: position.left,
                zIndex: zIndex,
            } }, shouldRenderContent ? dropdown : null)));
}

exports.default = Dropdown;
//# sourceMappingURL=index.js.map
